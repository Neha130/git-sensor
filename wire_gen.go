// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/devtron-labs/git-sensor/api"
	"github.com/devtron-labs/git-sensor/internal"
	"github.com/devtron-labs/git-sensor/internal/logger"
	"github.com/devtron-labs/git-sensor/internal/sql"
	"github.com/devtron-labs/git-sensor/pkg"
	"github.com/devtron-labs/git-sensor/pkg/git"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	sugaredLogger := logger.NewSugardLogger()
	config, err := sql.GetConfig()
	if err != nil {
		return nil, err
	}
	db, err := sql.NewDbConnection(config, sugaredLogger)
	if err != nil {
		return nil, err
	}
	materialRepositoryImpl := sql.NewMaterialRepositoryImpl(db)
	gitUtil := git.NewGitUtil(sugaredLogger)
	repositoryManagerImpl := git.NewRepositoryManagerImpl(sugaredLogger, gitUtil)
	gitProviderRepositoryImpl := sql.NewGitProviderRepositoryImpl(db)
	webhookEventRepositoryImpl := sql.NewWebhookEventRepositoryImpl(db)
	webhookEventParsedDataRepositoryImpl := sql.NewWebhookEventParsedDataRepositoryImpl(db)
	webhookEventDataMappingRepositoryImpl := sql.NewWebhookEventDataMappingRepositoryImpl(db)
	webhookEventDataMappingFilterResultRepositoryImpl := sql.NewWebhookEventDataMappingFilterResultRepositoryImpl(db)
	ciPipelineMaterialRepositoryImpl := sql.NewCiPipelineMaterialRepositoryImpl(db, sugaredLogger)
	repositoryLocker := internal.NewRepositoryLocker(sugaredLogger)
	conn, err := internal.NewNatsConnection()
	if err != nil {
		return nil, err
	}
	webhookEventBeanConverterImpl := git.NewWebhookEventBeanConverterImpl()
	webhookEventServiceImpl := git.NewWebhookEventServiceImpl(sugaredLogger, webhookEventRepositoryImpl, webhookEventParsedDataRepositoryImpl, webhookEventDataMappingRepositoryImpl, webhookEventDataMappingFilterResultRepositoryImpl, materialRepositoryImpl, conn, webhookEventBeanConverterImpl)
	webhookEventParserImpl := git.NewWebhookEventParserImpl(sugaredLogger)
	webhookHandlerImpl := git.NewWebhookHandlerImpl(sugaredLogger, webhookEventServiceImpl, webhookEventParserImpl)
	gitWatcherImpl, err := git.NewGitWatcherImpl(repositoryManagerImpl, materialRepositoryImpl, sugaredLogger, ciPipelineMaterialRepositoryImpl, repositoryLocker, conn, webhookHandlerImpl)
	if err != nil {
		return nil, err
	}
	repoManagerImpl := pkg.NewRepoManagerImpl(sugaredLogger, materialRepositoryImpl, repositoryManagerImpl, gitProviderRepositoryImpl, ciPipelineMaterialRepositoryImpl, repositoryLocker, gitWatcherImpl, webhookEventRepositoryImpl, webhookEventParsedDataRepositoryImpl, webhookEventDataMappingRepositoryImpl, webhookEventDataMappingFilterResultRepositoryImpl, webhookEventBeanConverterImpl)
	restHandlerImpl := api.NewRestHandlerImpl(repoManagerImpl, sugaredLogger)
	muxRouter := api.NewMuxRouter(sugaredLogger, restHandlerImpl)
	app := NewApp(muxRouter, sugaredLogger, gitWatcherImpl, db, conn)
	return app, nil
}
